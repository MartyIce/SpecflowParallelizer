// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace BuildFileGenerator
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Apps\repos-ascendon-core\ContentDirect\MojoTools\TestAutomation\BuildFileGenerator\parallel.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class parallel : parallelBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<?xml version=\"1.0\"?>\r\n<project name=\"Execute All\" default=\"tests.unit.run\" based" +
                    "ir=\".\">\r\n    <target name=\"tests.unit.run\" description=\"Run unit tests\">\r\n\t\t\t<pa" +
                    "rallelexec>\r\n");
            
            #line 14 "C:\Apps\repos-ascendon-core\ContentDirect\MojoTools\TestAutomation\BuildFileGenerator\parallel.tt"
 foreach(var testNs in Namespaces) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t<exec program=\"C:\\Program Files (x86)\\NUnit 2.6.4\\bin\\nunit-console.exe\" work" +
                    "ingdir=\"C:\\Apps\\repos-ascendon-core\\ContentDirect\\CoreService\\Bin\" commandline=\"" +
                    "ContentDirect.CoreService.Features.dll  /fixture:");
            
            #line 15 "C:\Apps\repos-ascendon-core\ContentDirect\MojoTools\TestAutomation\BuildFileGenerator\parallel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(testNs));
            
            #line default
            #line hidden
            this.Write(" /xml:");
            
            #line 15 "C:\Apps\repos-ascendon-core\ContentDirect\MojoTools\TestAutomation\BuildFileGenerator\parallel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TestOutputDirectory));
            
            #line default
            #line hidden
            this.Write("\\");
            
            #line 15 "C:\Apps\repos-ascendon-core\ContentDirect\MojoTools\TestAutomation\BuildFileGenerator\parallel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(testNs));
            
            #line default
            #line hidden
            this.Write(".TestResults.xml /nologo\"/>\r\n");
            
            #line 16 "C:\Apps\repos-ascendon-core\ContentDirect\MojoTools\TestAutomation\BuildFileGenerator\parallel.tt"
 } 
            
            #line default
            #line hidden
            this.Write("  \t\t\t</parallelexec>\r\n\t</target>\t\r\n\r\n <script language=\"C#\" prefix=\"directory\">\r\n" +
                    "    <code>\r\n      <![CDATA[\r\n    [TaskName(\"parallelexec\")]\r\n    public class Pa" +
                    "rallelExecTask : TaskContainer\r\n    {\r\n\r\n        [BuildElementArray(\"exec\", Requ" +
                    "ired = true, ElementType = typeof(NAnt.Core.Tasks.ExecTask))]\r\n        public NA" +
                    "nt.Core.Tasks.ExecTask[] ExecTasks { get; set; }\r\n \r\n        [TaskAttribute(\"thr" +
                    "eadcount\")]\r\n        public int ThreadCount { get; set; }\r\n \r\n        protected " +
                    "override void ExecuteTask()\r\n        {\r\n            var parallelOptions = new Sy" +
                    "stem.Threading.Tasks.ParallelOptions();\r\n \r\n            if (ThreadCount > 0)\r\n  " +
                    "          {\r\n                parallelOptions.MaxDegreeOfParallelism = ThreadCoun" +
                    "t;\r\n                Log(Level.Verbose, string.Format(\"Executing in parallel usin" +
                    "g at most {0} threads...\", ThreadCount));\r\n            }\r\n            else\r\n    " +
                    "        {\r\n                Log(Level.Verbose, string.Format(\"Executing in parall" +
                    "el using at most {0} threads...\", ThreadCount));\r\n            }\r\n \r\n            " +
                    "try\r\n            {\r\n                System.Threading.Tasks.Parallel.ForEach(Exec" +
                    "Tasks, parallelOptions, Body);\r\n            }\r\n            catch (AggregateExcep" +
                    "tion e)\r\n            {\r\n                foreach (Exception innerException in e.I" +
                    "nnerExceptions)\r\n                {\r\n                    if (innerException is Bu" +
                    "ildException)\r\n                        Log(Level.Error, innerException.Message);" +
                    "\r\n                    else\r\n                        throw innerException;\r\n     " +
                    "           }\r\n                throw new BuildException(\"Parallel execution faile" +
                    "d for \" + e.InnerExceptions.Count + \" of \" + ExecTasks.Length + \" commands execu" +
                    "tions (see the above log).\", Location);\r\n            }\r\n        }\r\n \r\n        pr" +
                    "ivate void Body(NAnt.Core.Tasks.ExecTask execTask)\r\n        {\r\n            try\r\n" +
                    "            {\r\n                execTask.Execute();\r\n            }\r\n            c" +
                    "atch (BuildException e)\r\n            {\r\n                throw new BuildException" +
                    "(\"External Program Failed: \" + execTask.ProgramFileName + \" \" + execTask.Command" +
                    "Line + \" (return code was \" + execTask.ExitCode + \")\", e);\r\n            }\r\n     " +
                    "   }\r\n    }\r\n    ]]>\r\n    </code>\r\n  </script>\r\n\r\n\r\n</project>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class parallelBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
